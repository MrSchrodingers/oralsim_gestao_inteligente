services:
  # --------------------------------------------------------------------------
  # PostgreSQL
  # --------------------------------------------------------------------------
  db:
    image: postgres:17
    container_name: oralsin_db
    restart: unless-stopped
    env_file: .env
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASS}
      POSTGRES_DB: ${DB_NAME}
    ports:
      - "${DB_EXTERNAL_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -p 5432 -q"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - proxy-global
  
  # --------------------------------------------------------------------------
  # RabbitMQ
  # --------------------------------------------------------------------------
  rabbitmq:
    image: rabbitmq:3.13-management
    container_name: oralsin_rabbitmq
    restart: unless-stopped
    env_file: .env
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-admin}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASS:-admin}
      RABBITMQ_DEFAULT_VHOST: /
    ports:
      - "${RABBITMQ_AMQP_EXTERNAL_PORT:-5672}:5672"
      - "${RABBITMQ_MANAGEMENT_EXTERNAL_PORT:-15672}:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - ./rabbitmq-definitions.json:/etc/rabbitmq/definitions.json:ro
    command: >
      rabbitmq-server
      --load-definitions /etc/rabbitmq/definitions.json
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping", "-q"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - proxy-global

  # --------------------------------------------------------------------------
  # Redis (cache, canais, Celery result backend)
  # --------------------------------------------------------------------------
  redis:
    image: redis:7-alpine
    container_name: oralsin_redis
    restart: unless-stopped
    env_file: .env
    ports:
      - "${REDIS_EXTERNAL_PORT:-6379}:6379"
    command: >
      sh -c "redis-server --requirepass ${REDIS_PASSWORD}"
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - proxy-global

  # --------------------------------------------------------------------------
  # Django / Daphne + Uvicorn (API e métricas)
  # --------------------------------------------------------------------------
  app:
    build: .
    image: oralsim_core:latest
    container_name: oralsin_app
    restart: unless-stopped
    env_file: .env
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    expose:
      - "8000"
    ports:
      - "${APP_EXTERNAL_PORT:-8000}:8000"
    entrypoint: ./docker-entrypoint.sh
    networks:
      - proxy-global
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/api/healthz/ || exit 1"]
      start_period: 60s
      interval: 30s
      timeout: 10s
      retries: 5

  # --------------------------------------------------------------------------
  # Celery Worker
  # --------------------------------------------------------------------------
  worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: oralsin_worker
    restart: unless-stopped
    env_file: .env
    environment:
      DJANGO_SETTINGS_MODULE: config.settings
      CELERY_BROKER_URL: amqp://${RABBITMQ_USER}:${RABBITMQ_PASS}@rabbitmq:5672/${RABBITMQ_VHOST}
      CELERY_RESULT_BACKEND: redis://:${REDIS_PASSWORD}@redis:6379/0
      PYTHONPATH: /app/src:/app/libs
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
      app:
        condition: service_healthy
    command: >
      celery -A cobranca_inteligente_api worker
      --loglevel=INFO
      --concurrency=4
      --queues=default,email,sms,whatsapp,sync_notify,sync_process,payment_reminder,sync_process,oralsin_activities_processor,sync_notify
    networks:
      - proxy-global

  # --------------------------------------------------------------------------
  # Celery Beat (scheduler via django-celery-beat)
  # --------------------------------------------------------------------------
  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: oralsin_celery_beat
    restart: unless-stopped
    env_file: .env
    environment:
      DJANGO_SETTINGS_MODULE: config.settings
      CELERY_BROKER_URL: amqp://${RABBITMQ_USER}:${RABBITMQ_PASS}@rabbitmq:5672/${RABBITMQ_VHOST}
      CELERY_RESULT_BACKEND: redis://:${REDIS_PASSWORD}@redis:6379/0
      PYTHONPATH: /app/src:/app/libs
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
      app:
        condition: service_healthy
    command: >
      celery -A cobranca_inteligente_api beat
      --loglevel=INFO
      --scheduler django_celery_beat.schedulers:DatabaseScheduler
    networks:
      - proxy-global

  # --------------------------------------------------------------------------
  # Celery Exporter (Prometheus)
  # --------------------------------------------------------------------------
  oralsin-celery-exporter:
    image: ovalmoney/celery-exporter:latest
    container_name: oralsin_celery_exporter
    restart: unless-stopped
    env_file: .env
    environment:
      CELERY_EXPORTER_BROKER_URL: amqp://${RABBITMQ_USER}:${RABBITMQ_PASS}@rabbitmq:5672/${RABBITMQ_VHOST}
    expose:
      - "9500"
    ports:
      - "${CELERY_EXPORTER_EXTERNAL_PORT:-9500}:9500"
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - proxy-global

  # --------------------------------------------------------------------------
  # Rabbit Consumer (Pika)
  # --------------------------------------------------------------------------
  rabbit-consumer:
    image: oralsim_core:latest 
    container_name: oralsin_rabbit_consumer
    restart: on-failure
    env_file: .env
    working_dir: /app
    environment:
      DJANGO_SETTINGS_MODULE: config.settings
      RABBITMQ_URL: amqp://${RABBITMQ_USER}:${RABBITMQ_PASS}@rabbitmq:5672/${RABBITMQ_VHOST}
      REDIS_URL: ${REDIS_URL}
      PYTHONPATH: /app:/app/libs:/app/src
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
      app:
        condition: service_healthy
    command: >
      python src/notification_billing/adapters/message_broker/scripts/rabbit_consumer_entrypoint.py
    networks:
      - proxy-global

  registration-consumer:
    image: oralsim_core:latest              # mesma imagem local do serviço app
    restart: unless-stopped
    working_dir: /app
    env_file: .env
    environment:
      DJANGO_SETTINGS_MODULE: config.settings
      RABBITMQ_URL: amqp://${RABBITMQ_USER}:${RABBITMQ_PASS}@rabbitmq:5672/${RABBITMQ_VHOST}
      PYTHONPATH: /app:/app/libs:/app/src
    command: >
      python -m oralsin_core.adapters.message_broker.registration_pipeline_consumer
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
      app:
        condition: service_healthy
    networks:
      - proxy-global

  sync-consumer:
    image: oralsim_core:latest
    restart: unless-stopped
    working_dir: /app
    env_file: .env
    environment:
      DJANGO_SETTINGS_MODULE: config.settings
      RABBITMQ_URL: amqp://${RABBITMQ_USER}:${RABBITMQ_PASS}@rabbitmq:5672/${RABBITMQ_VHOST}
      PYTHONPATH: /app:/app/libs:/app/src
    command: >
      python -m oralsin_core.adapters.message_broker.sync_consumer
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
      app:
        condition: service_healthy
    networks:
      - proxy-global
  
volumes:
  postgres_data:
  rabbitmq_data:

networks:
  proxy-global:
    external: true
    name: proxy-global
