# Generated by Django 5.2.1 on 2025-09-29 12:08

import django.contrib.postgres.fields
import django.contrib.postgres.indexes
import django.contrib.postgres.search
import django.db.models.deletion
import django.db.models.functions.text
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='PaymentMethod',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('oralsin_payment_method_id', models.IntegerField(db_index=True, unique=True)),
                ('name', models.CharField(max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'payment_methods',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='PipeboardActivitySent',
            fields=[
                ('activity_id', models.BigIntegerField(primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'pipeboard_activity_sent',
            },
        ),
        migrations.CreateModel(
            name='Address',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('street', models.CharField(max_length=200)),
                ('number', models.CharField(max_length=50)),
                ('complement', models.CharField(blank=True, max_length=100, null=True)),
                ('neighborhood', models.CharField(blank=True, max_length=100, null=True)),
                ('city', models.CharField(max_length=100)),
                ('state', models.CharField(max_length=100)),
                ('zip_code', models.CharField(max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'addresses',
                'indexes': [models.Index(fields=['city'], name='addresses_city_dfd875_idx'), models.Index(fields=['state'], name='addresses_state_065a3c_idx'), django.contrib.postgres.indexes.BrinIndex(autosummarize=True, fields=['created_at'], name='addresses_created_12631c_brin')],
                'constraints': [models.UniqueConstraint(django.db.models.functions.text.Lower('street'), models.F('number'), models.F('zip_code'), name='uq_address_street_number_zip')],
            },
        ),
        migrations.CreateModel(
            name='Clinic',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('oralsin_clinic_id', models.IntegerField(db_index=True, unique=True)),
                ('name', models.CharField(max_length=255)),
                ('owner_name', models.CharField(blank=True, max_length=255, null=True)),
                ('cnpj', models.CharField(blank=True, max_length=18, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'clinics',
                'indexes': [django.contrib.postgres.indexes.BrinIndex(autosummarize=True, fields=['created_at'], name='clinics_created_79e994_brin')],
                'constraints': [models.UniqueConstraint(django.db.models.functions.text.Lower('name'), name='uq_clinic_name_lower')],
            },
        ),
        migrations.CreateModel(
            name='BillingSettings',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('min_days_overdue', models.PositiveIntegerField(default=90, help_text='Dias mínimos de atraso para escalonar dívida')),
                ('clinic', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='billing_settings', to='django_interface.clinic')),
            ],
            options={
                'db_table': 'billing_settings',
            },
        ),
        migrations.CreateModel(
            name='ClinicData',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('corporate_name', models.CharField(blank=True, max_length=255, null=True)),
                ('acronym', models.CharField(blank=True, max_length=50, null=True)),
                ('active', models.BooleanField(db_index=True, default=True)),
                ('franchise', models.BooleanField(db_index=True, default=False)),
                ('timezone', models.CharField(blank=True, max_length=50, null=True)),
                ('first_billing_date', models.DateField(blank=True, db_index=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('address', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='clinics', to='django_interface.address')),
                ('clinic', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='data', to='django_interface.clinic')),
            ],
            options={
                'db_table': 'clinics_data',
            },
        ),
        migrations.CreateModel(
            name='Contract',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('oralsin_contract_id', models.IntegerField(blank=True, db_index=True, null=True)),
                ('status', models.CharField(choices=[('ativo', 'Ativo'), ('inativo', 'Inativo'), ('cancelado', 'Cancelado')], db_index=True, default='ativo', max_length=10)),
                ('contract_version', models.CharField(blank=True, max_length=10, null=True)),
                ('remaining_installments', models.PositiveIntegerField(blank=True, null=True)),
                ('overdue_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=14, null=True)),
                ('final_contract_value', models.DecimalField(blank=True, decimal_places=2, max_digits=14, null=True)),
                ('do_notifications', models.BooleanField(db_index=True, default=True)),
                ('do_billings', models.BooleanField(db_index=True, default=False)),
                ('first_billing_date', models.DateField(blank=True, db_index=True, null=True)),
                ('negotiation_notes', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('clinic', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contracts', to='django_interface.clinic')),
            ],
            options={
                'db_table': 'contracts',
            },
        ),
        migrations.CreateModel(
            name='FlowStepConfig',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('step_number', models.PositiveIntegerField(unique=True)),
                ('channels', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(choices=[('sms', 'SMS'), ('whatsapp', 'WhatsApp'), ('email', 'E-mail'), ('phonecall', 'Ligação'), ('letter', 'Carta')], max_length=20), default=list, size=None)),
                ('cooldown_days', models.PositiveIntegerField(default=7)),
                ('active', models.BooleanField(db_index=True, default=True)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'flow_step_config',
                'ordering': ['step_number'],
                'indexes': [django.contrib.postgres.indexes.GinIndex(fields=['channels'], name='flow_step_c_channel_8000ca_gin')],
            },
        ),
        migrations.CreateModel(
            name='Installment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('contract_version', models.CharField(db_index=True, max_length=10, null=True)),
                ('schedule', models.BooleanField(default=False, help_text='Indica se a parcela tem um pagamento agendado.', null=True)),
                ('installment_number', models.PositiveIntegerField()),
                ('oralsin_installment_id', models.IntegerField(db_index=True, null=True, unique=True)),
                ('due_date', models.DateField(db_index=True)),
                ('installment_amount', models.DecimalField(decimal_places=2, max_digits=14)),
                ('received', models.BooleanField(db_index=True, default=False)),
                ('installment_status', models.CharField(blank=True, db_index=True, max_length=50, null=True)),
                ('is_current', models.BooleanField(db_index=True, default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('contract', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='installments', to='django_interface.contract')),
                ('payment_method', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='installments', to='django_interface.paymentmethod')),
            ],
            options={
                'db_table': 'installments',
            },
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('type', models.CharField(choices=[('sms', 'SMS'), ('email', 'E-mail'), ('whatsapp', 'WhatsApp')], max_length=20)),
                ('content', models.TextField()),
                ('step', models.PositiveIntegerField()),
                ('is_default', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('clinic', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='messages', to='django_interface.clinic')),
            ],
            options={
                'db_table': 'messages',
            },
        ),
        migrations.CreateModel(
            name='Patient',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('oralsin_patient_id', models.IntegerField(blank=True, db_index=True, null=True, unique=True)),
                ('name', models.CharField(max_length=200)),
                ('contact_name', models.CharField(blank=True, max_length=200, null=True)),
                ('cpf', models.CharField(blank=True, max_length=14, null=True)),
                ('email', models.EmailField(blank=True, db_index=True, max_length=254, null=True)),
                ('name_search_vector', django.contrib.postgres.search.SearchVectorField(null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('address', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='patients', to='django_interface.address')),
                ('clinic', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='patients', to='django_interface.clinic')),
            ],
            options={
                'db_table': 'patients',
            },
        ),
        migrations.AddField(
            model_name='contract',
            name='patient',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contracts', to='django_interface.patient'),
        ),
        migrations.CreateModel(
            name='ContactSchedule',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('notification_trigger', models.CharField(choices=[('automated', 'Automatizado'), ('manual', 'Manual')], default='automated', max_length=20)),
                ('advance_flow', models.BooleanField(default=False)),
                ('current_step', models.PositiveIntegerField()),
                ('channel', models.CharField(max_length=20)),
                ('scheduled_date', models.DateTimeField(db_index=True)),
                ('status', models.CharField(choices=[('pending', 'Pendente'), ('approved', 'Aprovado'), ('processing', 'Processando'), ('rejected', 'Rejeitado'), ('cancelled_paid', 'Cancelado por Pagamento')], default='pending', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('clinic', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='schedules', to='django_interface.clinic')),
                ('contract', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='schedules', to='django_interface.contract')),
                ('installment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='schedules', to='django_interface.installment')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='schedules', to='django_interface.patient')),
            ],
            options={
                'db_table': 'contact_schedules',
            },
        ),
        migrations.CreateModel(
            name='ContactHistory',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('notification_trigger', models.CharField(choices=[('automated', 'Automatizado'), ('manual', 'Manual')], default='automated', max_length=20)),
                ('advance_flow', models.BooleanField(default=False)),
                ('contact_type', models.CharField(choices=[('sms', 'SMS'), ('email', 'E-mail'), ('whatsapp', 'WhatsApp')], max_length=20)),
                ('sent_at', models.DateTimeField(blank=True, db_index=True, null=True)),
                ('duration_ms', models.PositiveIntegerField(blank=True, null=True)),
                ('feedback_status', models.CharField(blank=True, max_length=50, null=True)),
                ('success', models.BooleanField(default=True, help_text='Indica se o contato foi concluído sem erros')),
                ('observation', models.TextField(blank=True, null=True)),
                ('observation_search_vector', django.contrib.postgres.search.SearchVectorField(null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('clinic', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='history', to='django_interface.clinic')),
                ('schedule', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='history', to='django_interface.contactschedule')),
                ('contract', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='history', to='django_interface.contract')),
                ('message', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='history', to='django_interface.message')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='history', to='django_interface.patient')),
            ],
            options={
                'db_table': 'contact_history',
            },
        ),
        migrations.CreateModel(
            name='CollectionCase',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('stage_id', models.IntegerField(blank=True, help_text='ID da etapa do negócio no Pipedrive', null=True)),
                ('opened_at', models.DateTimeField()),
                ('amount', models.DecimalField(decimal_places=2, max_digits=14)),
                ('deal_id', models.BigIntegerField(blank=True, null=True)),
                ('last_stage_id', models.BigIntegerField(blank=True, null=True)),
                ('deal_sync_status', models.CharField(choices=[('pending', 'Pendente'), ('created', 'Criado'), ('updated', 'Atualizado'), ('error', 'Erro')], default='pending', max_length=20)),
                ('status', models.CharField(choices=[('open', 'Aberto'), ('closed', 'Fechado')], default='open', max_length=20)),
                ('clinic', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='django_interface.clinic')),
                ('contract', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='django_interface.contract')),
                ('installment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='django_interface.installment')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='django_interface.patient')),
            ],
            options={
                'db_table': 'collection_cases',
            },
        ),
        migrations.CreateModel(
            name='PatientPhone',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('phone_number', models.CharField(max_length=20)),
                ('phone_type', models.CharField(blank=True, choices=[('home', 'Residencial'), ('mobile', 'Celular'), ('commercial', 'Comercial'), ('contact', 'Contato')], max_length=12, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='phones', to='django_interface.patient')),
            ],
            options={
                'db_table': 'patient_phones',
            },
        ),
        migrations.AddField(
            model_name='contract',
            name='payment_method',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='contracts', to='django_interface.paymentmethod'),
        ),
        migrations.CreateModel(
            name='PaymentStatus',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('raw_status', models.CharField(max_length=80, unique=True)),
                ('normalized', models.CharField(db_index=True, max_length=80)),
                ('is_paid', models.BooleanField(default=False)),
                ('kind', models.CharField(default='unknown', max_length=20)),
                ('first_seen_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'payment_statuses',
                'indexes': [models.Index(fields=['normalized'], name='payment_sta_normali_89a8cc_idx')],
            },
        ),
        migrations.CreateModel(
            name='PendingCall',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('current_step', models.PositiveIntegerField()),
                ('scheduled_at', models.DateTimeField(db_index=True, help_text='Quando a ligação deve ser feita')),
                ('last_attempt_at', models.DateTimeField(blank=True, null=True)),
                ('attempts', models.PositiveIntegerField(default=0)),
                ('status', models.CharField(choices=[('pending', 'Pendente'), ('done', 'Concluída'), ('failed', 'Falhou')], db_index=True, default='pending', max_length=10)),
                ('result_notes', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('clinic', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pending_calls', to='django_interface.clinic')),
                ('contract', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pending_calls', to='django_interface.contract')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pending_calls', to='django_interface.patient')),
                ('schedule', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='pending_calls', to='django_interface.contactschedule')),
            ],
            options={
                'db_table': 'pending_calls',
            },
        ),
        migrations.CreateModel(
            name='PendingSync',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('object_type', models.CharField(choices=[('clinic', 'Clinic'), ('patient', 'Patient')], max_length=20)),
                ('object_api_id', models.IntegerField(blank=True, null=True)),
                ('action', models.CharField(max_length=50)),
                ('new_data', models.JSONField()),
                ('old_data', models.JSONField(blank=True, null=True)),
                ('status', models.CharField(choices=[('pending', 'Pendente'), ('approved', 'Aprovado'), ('rejected', 'Rejeitado'), ('applied', 'Aplicado')], default='pending', max_length=20)),
                ('processed_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'pending_sync',
                'indexes': [django.contrib.postgres.indexes.GinIndex(fields=['new_data'], name='pending_syn_new_dat_991ef8_gin'), django.contrib.postgres.indexes.GinIndex(fields=['old_data'], name='pending_syn_old_dat_35bc22_gin'), models.Index(fields=['status'], name='pending_syn_status_3e3b24_idx'), models.Index(fields=['object_type'], name='pending_syn_object__138f75_idx'), models.Index(condition=models.Q(('status', 'pending')), fields=['created_at'], name='pending_recent_pending_idx'), django.contrib.postgres.indexes.BrinIndex(autosummarize=True, fields=['created_at'], name='pending_syn_created_435f9b_brin')],
            },
        ),
        migrations.CreateModel(
            name='RegistrationRequest',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('email', models.EmailField(max_length=128)),
                ('password_hash', models.CharField(help_text='Store hashed passwords only', max_length=128)),
                ('name', models.CharField(help_text='Full name of the requester', max_length=100)),
                ('password_enc', models.CharField(help_text='Senha em texto-claro, cifrada com Fernet; será apagada após aprovação.', max_length=256)),
                ('clinic_name', models.CharField(help_text='The name of the clinic being registered', max_length=255)),
                ('contact_phone', models.CharField(max_length=20)),
                ('cordial_billing_config', models.IntegerField(default=90, help_text='Dias mínimos para cobrança amigável')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected')], db_index=True, default='pending', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'registration_requests',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['status'], name='registratio_status_ac51a3_idx'), models.Index(fields=['email'], name='registratio_email_b0b6d2_idx')],
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('email', models.EmailField(max_length=128, unique=True)),
                ('password_hash', models.CharField(max_length=128)),
                ('name', models.CharField(max_length=100)),
                ('clinic_name', models.CharField(blank=True, max_length=255, null=True)),
                ('is_active', models.BooleanField(db_index=True, default=True)),
                ('role', models.CharField(choices=[('admin', 'Admin'), ('clinic', 'Clinic')], db_index=True, default='clinic', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'users',
                'indexes': [models.Index(django.db.models.functions.text.Lower('email'), name='user_email_lower_idx')],
            },
        ),
        migrations.CreateModel(
            name='UserClinic',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('linked_at', models.DateTimeField(auto_now_add=True)),
                ('clinic', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='users', to='django_interface.clinic')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='clinics', to='django_interface.user')),
            ],
            options={
                'db_table': 'user_clinics',
            },
        ),
        migrations.CreateModel(
            name='ClinicPhone',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('phone_number', models.CharField(max_length=20)),
                ('contact_phone', models.CharField(max_length=20)),
                ('phone_type', models.CharField(blank=True, max_length=20, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('clinic', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='phones', to='django_interface.clinic')),
            ],
            options={
                'db_table': 'clinic_phones',
                'indexes': [models.Index(fields=['clinic'], name='clinic_phon_clinic__dcba4e_idx'), models.Index(fields=['phone_type'], name='clinic_phon_phone_t_c9ad86_idx')],
            },
        ),
        migrations.CreateModel(
            name='CoveredClinic',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('active', models.BooleanField(db_index=True, default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('oralsin_clinic_id', models.IntegerField(db_index=True, editable=False, unique=True)),
                ('name', models.CharField(editable=False, max_length=255)),
                ('corporate_name', models.CharField(blank=True, max_length=255, null=True)),
                ('acronym', models.CharField(blank=True, max_length=50, null=True)),
                ('cnpj', models.CharField(blank=True, max_length=18, null=True)),
                ('clinic', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='coverage', to='django_interface.clinic')),
            ],
            options={
                'db_table': 'covered_clinics',
                'indexes': [models.Index(fields=['name'], name='covered_cli_name_71ae33_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='message',
            index=models.Index(fields=['type', 'step'], name='messages_type_6d8c69_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='message',
            unique_together={('type', 'step', 'clinic')},
        ),
        migrations.AddIndex(
            model_name='patient',
            index=django.contrib.postgres.indexes.GinIndex(fields=['name_search_vector'], name='patients_name_se_c55138_gin'),
        ),
        migrations.AddIndex(
            model_name='patient',
            index=django.contrib.postgres.indexes.BrinIndex(autosummarize=True, fields=['created_at'], name='patients_created_070eaf_brin'),
        ),
        migrations.AddIndex(
            model_name='contactschedule',
            index=models.Index(fields=['clinic', 'scheduled_date'], name='contact_sch_clinic__7bd933_idx'),
        ),
        migrations.AddIndex(
            model_name='contactschedule',
            index=models.Index(fields=['installment'], name='contact_sch_install_65331f_idx'),
        ),
        migrations.AddIndex(
            model_name='contactschedule',
            index=django.contrib.postgres.indexes.BrinIndex(autosummarize=True, fields=['scheduled_date'], name='contact_sch_schedul_c096cb_brin'),
        ),
        migrations.AddConstraint(
            model_name='contactschedule',
            constraint=models.UniqueConstraint(condition=models.Q(('status', 'pending')), fields=('patient', 'contract', 'current_step', 'channel', 'installment'), name='uq_schedule_pending_per_step'),
        ),
        migrations.AddConstraint(
            model_name='contactschedule',
            constraint=models.UniqueConstraint(condition=models.Q(('notification_trigger', 'automated'), ('status', 'pending')), fields=('patient', 'channel'), name='uq_patient_channel_pending'),
        ),
        migrations.AddIndex(
            model_name='contacthistory',
            index=models.Index(fields=['clinic', 'sent_at', 'contact_type', 'success'], name='contact_his_clinic__f08dbe_idx'),
        ),
        migrations.AddIndex(
            model_name='contacthistory',
            index=django.contrib.postgres.indexes.BrinIndex(autosummarize=True, fields=['sent_at'], name='contact_his_sent_at_485a25_brin'),
        ),
        migrations.AddIndex(
            model_name='contacthistory',
            index=django.contrib.postgres.indexes.GinIndex(fields=['observation_search_vector'], name='contact_his_observa_90e67d_gin'),
        ),
        migrations.AddConstraint(
            model_name='contacthistory',
            constraint=models.UniqueConstraint(fields=('schedule', 'contact_type', 'advance_flow'), name='uq_history_schedule_channel_step'),
        ),
        migrations.AddIndex(
            model_name='collectioncase',
            index=models.Index(fields=['clinic', 'status', 'patient', 'deal_id', 'last_stage_id', 'installment', 'deal_sync_status'], name='collection__clinic__98794e_idx'),
        ),
        migrations.AddIndex(
            model_name='patientphone',
            index=models.Index(fields=['patient'], name='patient_pho_patient_00bcc6_idx'),
        ),
        migrations.AddIndex(
            model_name='patientphone',
            index=models.Index(fields=['phone_type'], name='patient_pho_phone_t_ea0357_idx'),
        ),
        migrations.AddIndex(
            model_name='installment',
            index=models.Index(fields=['contract', 'contract_version', 'installment_number', 'is_current'], name='installment_contrac_918717_idx'),
        ),
        migrations.AddIndex(
            model_name='installment',
            index=django.contrib.postgres.indexes.BrinIndex(autosummarize=True, fields=['due_date'], name='installment_due_dat_879b8d_brin'),
        ),
        migrations.AddIndex(
            model_name='installment',
            index=models.Index(condition=models.Q(('received', False)), fields=['received', 'due_date'], name='inst_overdue_idx'),
        ),
        migrations.AddIndex(
            model_name='installment',
            index=models.Index(condition=models.Q(('is_current', True), ('received', False)), fields=['due_date'], name='inst_current_overdue_idx'),
        ),
        migrations.AddIndex(
            model_name='installment',
            index=models.Index(fields=['contract', 'is_current'], name='inst_contract_current_idx'),
        ),
        migrations.AddConstraint(
            model_name='installment',
            constraint=models.UniqueConstraint(condition=models.Q(('is_current', True)), fields=('contract', 'contract_version'), name='unique_current_per_contract_version'),
        ),
        migrations.AlterUniqueTogether(
            name='installment',
            unique_together={('contract', 'oralsin_installment_id')},
        ),
        migrations.AddIndex(
            model_name='contract',
            index=models.Index(fields=['clinic', 'patient'], name='contracts_clinic__8d6899_idx'),
        ),
        migrations.AddIndex(
            model_name='contract',
            index=models.Index(fields=['status'], name='contracts_status_093df1_idx'),
        ),
        migrations.AddIndex(
            model_name='contract',
            index=django.contrib.postgres.indexes.BrinIndex(autosummarize=True, fields=['first_billing_date'], name='contracts_first_b_279299_brin'),
        ),
        migrations.AlterUniqueTogether(
            name='contract',
            unique_together={('oralsin_contract_id', 'contract_version', 'patient')},
        ),
        migrations.AddIndex(
            model_name='pendingcall',
            index=models.Index(fields=['clinic', 'status'], name='pending_cal_clinic__b536da_idx'),
        ),
        migrations.AddIndex(
            model_name='pendingcall',
            index=django.contrib.postgres.indexes.BrinIndex(autosummarize=True, fields=['scheduled_at'], name='pending_cal_schedul_b769ce_brin'),
        ),
        migrations.AddConstraint(
            model_name='pendingcall',
            constraint=models.UniqueConstraint(condition=models.Q(('status', 'pending')), fields=('patient', 'contract', 'current_step'), name='uq_pending_phonecall_per_step'),
        ),
        migrations.AddIndex(
            model_name='userclinic',
            index=models.Index(fields=['clinic'], name='user_clinic_clinic__1bdd85_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='userclinic',
            unique_together={('user', 'clinic')},
        ),
    ]

