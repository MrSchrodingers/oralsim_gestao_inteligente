"""
seed_data.py
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
Cria:
‚Ä¢ super_admin (opcional)
‚Ä¢ CoveredClinic  ‚á¢  Clinic (Django)
‚Ä¢ usu√°rio da cl√≠nica (role="clinic") **usando as credenciais informadas**
‚Ä¢ (opcional) sync completo de inadimpl√™ncia + ajuste de flags de billing

Principais mudan√ßas
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
1.  Novos argumentos **--clinic-email / --clinic-pass**  
    ‚Äì permitem enviar login/senha da cl√≠nica;
2.  `_create_or_get_clinic_user()` recebe `email`/`password` opcionais;  
    se n√£o vierem, cai no comportamento antigo (slug gerado);
3.  Valida√ß√£o simples: se s√≥ um dos dois campos for passado, dispara erro.
"""

from __future__ import annotations

import random
import uuid
from datetime import date, timedelta
from typing import Any

from django.core.management.base import BaseCommand, CommandError
from django.db import transaction
from django.utils.text import slugify
from oralsin_core.adapters.config.composition_root import (
    setup_di_container_from_settings,
)
from oralsin_core.core.application.commands.billing_settings_commands import (
    UpdateBillingSettingsCommand,
)
from oralsin_core.core.application.commands.coverage_commands import (
    RegisterCoverageClinicCommand,
)
from oralsin_core.core.application.commands.user_commands import CreateUserCommand
from oralsin_core.core.application.dtos.user_dto import CreateUserDTO

from plugins.django_interface.models import Contract as ContractModel


class Command(BaseCommand):
    help = (
        "Seed din√¢mico: cria super_admin, registra a CoveredClinic "
        "e (opcionalmente) sincroniza inadimpl√™ncia via OralsinCore."
    )

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ argumentos CLI ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    def add_arguments(self, parser) -> None:
        parser.add_argument("--clinic-name",  type=str, help="Nome exato da cl√≠nica")
        parser.add_argument("--owner-name",   type=str, help="Nome do respons√°vel")

        # credenciais do super_admin
        parser.add_argument("--admin-email",  default="admin@localhost")
        parser.add_argument("--admin-pass",   default="changeme")
        parser.add_argument("--skip-admin",   action="store_true")

        # credenciais do usu√°rio da cl√≠nica
        parser.add_argument("--clinic-email", type=str)
        parser.add_argument("--clinic-pass",  type=str)
        parser.add_argument("--skip-clinic-user", action="store_true")

        parser.add_argument("--min-days-billing", type=int, default=90)
        parser.add_argument("--skip-full-sync",   action="store_true")
        parser.add_argument("--no-schedules",     action="store_true")

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ entry-point ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    def handle(self, *args: Any, **opt: Any) -> None:  # noqa: PLR0915
        container = setup_di_container_from_settings(None)
        cmd_bus    = container.command_bus()

        clinic_name: str | None = opt["clinic_name"]
        owner_name:  str | None = opt["owner_name"]

        # super-admin options
        admin_email, admin_pass = opt["admin_email"], opt["admin_pass"]
        skip_admin: bool        = opt["skip_admin"]

        # clinic-user options
        clinic_email: str | None = opt["clinic_email"]
        clinic_pass:  str | None = opt["clinic_pass"]
        skip_clinic_user: bool   = opt["skip_clinic_user"]

        if (clinic_email and not clinic_pass) or (clinic_pass and not clinic_email):
            raise CommandError("--clinic-email e --clinic-pass devem ser usados juntos")

        # ‚îÄ‚îÄ modo somente-admin ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        if not clinic_name:
            if skip_admin:
                self.stdout.write(
                    self.style.WARNING("Nenhuma a√ß√£o executada. (--clinic-name ausente)")
                )
                return

            self.stdout.write(self.style.NOTICE("üöÄ Criando super_admin‚Ä¶"))
            admin_id = self._create_or_get_admin(container, admin_email, admin_pass)
            self.stdout.write(self.style.SUCCESS(f"üéâ super_admin={admin_id}"))
            return

        # se clinic_name foi passado, owner_name √© obrigat√≥rio
        if not owner_name:
            raise CommandError("--owner-name √© obrigat√≥rio se --clinic-name for usado")

        # ‚îÄ‚îÄ SEED COMPLETO ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        self.stdout.write(self.style.NOTICE("üöÄ Seed din√¢mico completo iniciado‚Ä¶"))

        min_days_billing   = opt["min_days_billing"]
        skip_sync: bool    = opt["skip_full_sync"]
        no_schedules: bool = opt["no_schedules"]

        with transaction.atomic():
            covered_id, oralsin_id = self._register_coverage(
                container, clinic_name, owner_name
            )
            self.stdout.write(
                self.style.SUCCESS(
                    f"üè• CoveredClinic={covered_id}  OralsinID={oralsin_id}"
                )
            )

            cmd_bus.dispatch(
                UpdateBillingSettingsCommand(
                    clinic_id=str(covered_id),
                    min_days_overdue=min_days_billing,
                )
            )
            self.stdout.write(
                self.style.SUCCESS(
                    f"‚öôÔ∏è BillingSettings.min_days_overdue={min_days_billing}"
                )
            )

            if not skip_admin:
                admin_id = self._create_or_get_admin(container, admin_email, admin_pass)
                self.stdout.write(self.style.SUCCESS(f"üë§ super_admin={admin_id}"))

            if not skip_clinic_user:
                clinic_user_id = self._create_or_get_clinic_user(
                    container,
                    clinic_name     = clinic_name,
                    clinic_id       = covered_id,
                    email_override  = clinic_email,
                    password_override = clinic_pass,
                )
                self.stdout.write(self.style.SUCCESS(f"üë§ clinic_user={clinic_user_id}"))

        # ‚îÄ‚îÄ sync inadimpl√™ncia (opcional) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        self._post_seed_sync(
            container,
            oralsin_id,
            skip_sync,
            no_schedules,
        )

        self.stdout.write(self.style.SUCCESS("üéâ Seed finalizado com sucesso."))

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ helpers ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    def _create_or_get_admin(self, container, email: str, password: str) -> uuid.UUID:
        cmd = CreateUserCommand(
            payload=CreateUserDTO(
                email=email,
                password=password,
                name="Super Admin",
                role="admin",
            )
        )
        result = container.command_bus().dispatch(cmd)
        return result.id  # type: ignore

    def _create_or_get_clinic_user(
        self,
        container,
        *,
        clinic_name: str,
        clinic_id: uuid.UUID,
        email_override: str | None,
        password_override: str | None,
    ) -> uuid.UUID:
        """
        Garante User(role='clinic') + v√≠nculo UserClinic.
        Se email/senha forem fornecidos via CLI, usa-os. Caso contr√°rio
        gera `<slug>@oralsin.admin.com.br` / `<slug>@oralsin`.
        """
        if email_override and password_override:
            email, password = email_override, password_override
        else:
            slug  = slugify(clinic_name).replace("-", ".")
            email = f"{slug}@oralsin.admin.com.br"
            password = f"{slug}@oralsin"

        dto = CreateUserDTO(
            email     = email,
            password  = password,
            name      = clinic_name,
            role      = "clinic",
            clinic_id = str(clinic_id),
        )

        try:
            user = container.command_bus().dispatch(CreateUserCommand(payload=dto))
            self.stdout.write(f"‚ûï Criado clinic-user `{email}`")
        except Exception:
            from plugins.django_interface.models import User as UserModel

            existing = UserModel.objects.filter(email=email).first()
            user = type("X", (), {"id": existing.id})
            self.stdout.write(f"‚ÑπÔ∏è clinic-user `{email}` j√° existe")
        return user.id  # type: ignore

    def _register_coverage(
        self,
        container,
        clinic_name: str,
        owner_name: str,
    ) -> tuple[uuid.UUID, int]:
        from plugins.django_interface.models import Clinic as ClinicModel

        covered = container.command_bus().dispatch(
            RegisterCoverageClinicCommand(
                clinic_name=clinic_name,
                owner_name=owner_name,
            )
        )
        clinic_obj, _ = ClinicModel.objects.update_or_create(
            oralsin_clinic_id=covered.oralsin_clinic_id,
            defaults={"name": clinic_name},
        )
        return clinic_obj.id, covered.oralsin_clinic_id  # type: ignore

    # ------------------------------------------------------------------
    def _post_seed_sync(
        self,
        container,
        oralsin_id: int,
        skip_sync: bool,
        no_schedules: bool,
    ) -> None:
        today = date.today()
        if skip_sync:
            start, end = today - timedelta(days=15), today + timedelta(days=15)
            self.stdout.write(
                self.style.WARNING(f"‚ö° --skip-full-sync: {start} ‚Üí {end}")
            )
        else:
            start, end = today - timedelta(days=200), today + timedelta(days=730)
            self.stdout.write(self.style.NOTICE("‚è≥ Sync completo (datas padr√£o)‚Ä¶"))

        sync_service = container.oralsin_sync_service()
        sync_service.full_sync(
            clinic_id=oralsin_id,
            data_inicio=start,
            data_fim=end,
            no_schedules=no_schedules,
        )
        self.stdout.write(self.style.SUCCESS("‚û°Ô∏è Sincroniza√ß√£o conclu√≠da."))

        # ajuste de flags para ambientes de teste
        if not skip_sync:
            self._adjust_billing_flags(oralsin_id)

    # ------------------------------------------------------------------
    def _adjust_billing_flags(self, oralsin_id: int) -> None:
        self.stdout.write("üå± Ajustando flags de billing para testes‚Ä¶")
        all_contracts = list(
            ContractModel.objects.filter(clinic__oralsin_clinic_id=oralsin_id)
        )
        random.shuffle(all_contracts)
        half = len(all_contracts) // 2
        billing_ids      = [c.id for c in all_contracts[:half]]
        notification_ids = [c.id for c in all_contracts[half:]]

        ContractModel.objects.filter(id__in=billing_ids).update(
            do_billings=True,
            do_notifications=False,
        )
        ContractModel.objects.filter(id__in=notification_ids).update(
            do_billings=False,
            do_notifications=True,
        )
        self.stdout.write(
            self.style.SUCCESS(
                f"‚úÖ Flags Billing/Notification aplicadas ({len(all_contracts)} contratos)"
            )
        )
